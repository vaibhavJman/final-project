// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-py"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

//generator erd {
//  provider = "prisma-erd-generator"
//}


model User {
  id                Int       @id @default(autoincrement())
  firstName         String
  lastName          String
  email             String    @unique
  password          String
  role              Role
  speciality        String?  
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Link users to their performance metrics
  performanceMetrics EmployeePerformanceMetric[] @relation("UserPerformanceMetrics")

  trainingsAssigned Training[]          @relation("TrainerRelation")
  assignedTrainings TrainingAssignment[]
  scores            Score[]             @relation("EmployeeScores")

  isTrainerAssigned Boolean  @default(false)
}

model Training {
  id                Int       @id @default(autoincrement())
  name              String
  description       String?
  startDate         DateTime
  endDate           DateTime
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  trainerId         Int?
  trainer           User?       @relation("TrainerRelation", fields: [trainerId], references: [id])

  assignedEmployees TrainingAssignment[]

  scores            Score[]
}

model PerformanceMetrics {
  id                Int       @id @default(autoincrement())
  name              String
  description       String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  currentValue      Int?      @default(0)
  threshold         Int       // Single threshold for this metric
  increment         Int       // Value by which to increase if score > threshold

  // Reverse relation fields
  employeePerformanceMetrics EmployeePerformanceMetric[] @relation("MetricPerformanceMetrics")
  metricThresholds           MetricThreshold[]           @relation("MetricThresholdMetrics")
  
  // Define reverse relation for Score
  scores                      Score[]                    @relation("MetricToScores")
}


model Score {
  id             Int      @id @default(autoincrement())
  value          Int
  threshold1     Int      
  threshold2     Int      
  performanceInc1 Int     
  performanceInc2 Int     
  employeeId     Int      
  
  employee       User     @relation("EmployeeScores", fields: [employeeId], references: [id])
  trainingId     Int      
  training       Training @relation(fields: [trainingId], references: [id])
  
  metricId       Int      
  metric         PerformanceMetrics @relation("MetricToScores", fields: [metricId], references: [id]) // Define the reverse relation here

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}


model TrainingAssignment {
  id           Int      @id @default(autoincrement())
  employeeId   Int      
  employee     User     @relation(fields: [employeeId], references: [id])
  trainingId   Int      
  training     Training @relation(fields: [trainingId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  isAssigned   Boolean  @default(true) // Tracks if the employee is currently assigned to this training
  @@unique([employeeId, trainingId]) 
}

model EmployeePerformanceMetric {
  id                Int                  @id @default(autoincrement())
  employeeId        Int
  employee          User                 @relation("UserPerformanceMetrics", fields: [employeeId], references: [id]) // Corrected relation
  metricId          Int
  metric            PerformanceMetrics   @relation("MetricPerformanceMetrics", fields: [metricId], references: [id]) // Corrected relation
  currentValue      Int                  @default(0) // Tracks the current value for the employee's performance on this metric
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
}

model MetricThreshold {
  id                Int                  @id @default(autoincrement())
  threshold1        Int
  threshold2        Int
  performanceInc1   Int
  performanceInc2   Int
  performanceMetricId Int
  performanceMetric PerformanceMetrics   @relation("MetricThresholdMetrics", fields: [performanceMetricId], references: [id]) // Corrected relation
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
}

enum Role {
  ADMIN
  TRAINER
  EMPLOYEE
}
