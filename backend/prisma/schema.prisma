// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-py"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id                     Int                     @id @default(autoincrement())
  firstName              String
  lastName               String
  email                  String                  @unique
  gender                 String
  password               String
  role                   Role                    // User can be ADMIN or TRAINER
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt

  trainingsAssignedtoTrainers  Training[]         @relation("TrainerToTraining")
  scoresGiven            Score[]                 @relation("TrainerScores")

  assignedTrainings      TrainingAssignment[]     @relation("EmployeeTrainings")
  scoresReceived         Score[]                 @relation("EmployeeScores")
}

model Training {
  id                    Int                     @id @default(autoincrement())
  name                  String
  description           String
  startDate            DateTime
  endDate              DateTime
  domainId             Int                      // Foreign key to Domain
  domain               Domain                   @relation("DomainTrainings", fields: [domainId], references: [id]) // Relation to Domain

  trainer               User?                   @relation("TrainerToTraining", fields: [trainerId], references: [id])
  trainerId             Int?

  assignedEmployees      TrainingAssignment[]    // Employees assigned to this training
  scores                Score[]                 // Scores for this training
}

model Domain {
  id                    Int          @id @default(autoincrement())
  name                  DomainEnum   @unique                // Domain enum (Data Engineering, Machine Learning, etc.)

  trainings            Training[]    @relation("DomainTrainings") // Relation to multiple trainings
}

model Score {
  id                    Int      @id @default(autoincrement())
  value                 Int
  trainingId           Int
  training              Training  @relation(fields: [trainingId], references: [id])
  
  employeeId           Int
  employee             User      @relation("EmployeeScores", fields: [employeeId], references: [id])
  
  trainerId            Int
  trainer              User      @relation("TrainerScores", fields: [trainerId], references: [id])

  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
}

model TrainingAssignment {
  id                    Int      @id @default(autoincrement())
  employeeId           Int
  employee             User      @relation("EmployeeTrainings", fields: [employeeId], references: [id])

  trainingId           Int
  training             Training  @relation(fields: [trainingId], references: [id])

  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  @@unique([employeeId, trainingId])  // Ensure unique assignments
}

enum Role {
  ADMIN
  TRAINER
  EMPLOYEE
}

enum DomainEnum {
  DATA_ENGINEERING
  MACHINE_LEARNING
  FULL_STACK
}

