// This is your Prisma schema file.
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

generator erd {
  provider = "prisma-erd-generator"
}

model User {
  id                Int       @id @default(autoincrement())
  firstName         String
  lastName          String
  email             String    @unique
  password          String
  role              Role
  specialty         String?  
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  trainingsAssigned Training[]          @relation("TrainerRelation")
  assignedTrainings TrainingAssignment[]
  scores            Score[]             @relation("EmployeeScores")
  employeePerformances EmployeePerformanceMetric[]
}


model PerformanceMetrics {
  id              Int      @id @default(autoincrement())
  name            String
  description     String?
  threshold1      Int
  threshold2      Int
  performanceInc1 Int
  performanceInc2 Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  scores          Score[]
  employeePerformances EmployeePerformanceMetric[]
}


model Score {
  id             Int      @id @default(autoincrement())
  value          Int
  employeeId     Int      
  employee       User     @relation("EmployeeScores", fields: [employeeId], references: [id])
  trainingId     Int      
  training       Training @relation(fields: [trainingId], references: [id])
  metricId       Int      
  metric         PerformanceMetrics @relation(fields: [metricId], references: [id])

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}


model EmployeePerformanceMetric {
  id               Int      @id @default(autoincrement())
  employeeId       Int
  employee         User     @relation(fields: [employeeId], references: [id])
  metricId         Int
  metric           PerformanceMetrics @relation(fields: [metricId], references: [id])
  currentValue     Int     @default(0)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@unique([employeeId, metricId])
}

model Training {
  id                Int             @id @default(autoincrement())
  name              String
  description       String?
  startDate         DateTime
  endDate           DateTime
  status            TrainingStatus  @default(IN_PROGRESS)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  trainerId         Int?
  trainer           User?           @relation("TrainerRelation", fields: [trainerId], references: [id])

  assignedEmployees TrainingAssignment[]
  scores            Score[]  
}


model TrainingAssignment {
  id           Int               @id @default(autoincrement())
  employeeId   Int      
  employee     User              @relation(fields: [employeeId], references: [id])
  trainingId   Int      
  training     Training          @relation(fields: [trainingId], references: [id])
  status       AssignmentStatus  @default(ASSIGNED)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt

  @@unique([employeeId, trainingId]) 
}
