generator client {
  provider             = "prisma-client-js"
  recursive_type_depth = "5"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}


generator erd {
  provider = "prisma-erd-generator"
}


model User {
  id                          Int                  @id @default(autoincrement())
  firstName                   String
  lastName                    String
  email                       String               @unique
  password                    String
  role                        Role
  createdAt                   DateTime             @default(now())
  updatedAt                   DateTime             @updatedAt
  gender                      String
  scoresReceived              Score[]              @relation("EmployeeScores")
  scoresGiven                 Score[]              @relation("TrainerScores")
  trainingsAssignedtoTrainers Training[]           @relation("TrainerToTraining")
  assignedTrainings           TrainingAssignment[] @relation("EmployeeTrainings")
}

model Training {
  id                Int                  @id @default(autoincrement())
  name              String
  description       String
  startDate         DateTime
  endDate           DateTime
  domainId          Int
  trainerId         Int?
  scores            Score[]
  domain            Domain               @relation("DomainTrainings", fields: [domainId], references: [id])   
  trainer           User?                @relation("TrainerToTraining", fields: [trainerId], references: [id])
  assignedEmployees TrainingAssignment[]
}

model Domain {
  id        Int        @id @default(autoincrement())
  name      DomainEnum @unique
  trainings Training[] @relation("DomainTrainings")
}

model Score {
  id         Int      @id @default(autoincrement())
  value      Int
  trainingId Int
  employeeId Int
  trainerId  Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  employee   User     @relation("EmployeeScores", fields: [employeeId], references: [id])
  trainer    User     @relation("TrainerScores", fields: [trainerId], references: [id])
  training   Training @relation(fields: [trainingId], references: [id])
}

model TrainingAssignment {
  id         Int      @id @default(autoincrement())
  employeeId Int
  trainingId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  employee   User     @relation("EmployeeTrainings", fields: [employeeId], references: [id])
  training   Training @relation(fields: [trainingId], references: [id])

  @@unique([employeeId, trainingId])
}

enum Role {
  ADMIN
  TRAINER
  EMPLOYEE
}

enum DomainEnum {
  DATA_ENGINEERING
  MACHINE_LEARNING
  FULL_STACK
}